#!/usr/bin/env python3

"""
Whacdamole - A Kubernetes CD Operator and CLI Tool

Whacdamole is a Python-based command-line interface and custom operator for
managing the deployment  of applications in a Kubernetes environment. It
simplifies the processes of:

- Building and pushing Docker images.
- Deploying Helm charts and Kustomize manifests.
- Setting up and managing a local Docker registry.
- Supporting GitOps routines for continuous deployment.

This script uses a YAML configuration file (default: `.whacdamole`) to define
project details, Docker images, and deployment configurations. 

See https://github.com/3percentavos/whacdamole for more.

Copyright (c) 2025 3percentavos

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

"""

import argparse
import os
import subprocess
import sys
import tempfile
import threading
import time
import yaml
import shutil
from kubernetes import client, config, watch
import hashlib


class DockerHelper:
    @staticmethod
    def has_docker():
        try:
            docker_path = subprocess.check_output(
                ["which", "docker"], text=True
            ).strip()
            return os.path.isfile(docker_path) and os.access(docker_path, os.X_OK)
        except (subprocess.CalledProcessError, FileNotFoundError):
            return False

    @staticmethod
    def run_docker_compose(compose_content, action: list[str]):
        with tempfile.NamedTemporaryFile(delete=False, suffix=".yml") as f:
            f.write(compose_content.encode("utf-8"))
            temp_file_name = f.name

        try:
            subprocess.run(
                ["docker", "compose", "-f", temp_file_name] + action, check=True
            )
        finally:
            os.remove(temp_file_name)


class ConfigurationManager:
    def __init__(self, base_dir, config_file):
        self.base_dir = base_dir
        self.config_data = self.load_config(config_file)

    def load_config(self, config_file):
        config_path = os.path.join(self.base_dir, config_file)
        if not os.path.exists(config_path):
            print(f"Configuration file {config_path} not found.")
            sys.exit(1)

        with open(config_path, "r") as f:
            try:
                return yaml.safe_load(f)
            except yaml.YAMLError as exc:
                print(f"Error parsing {config_path}: {exc}")
                sys.exit(1)


class NetworkManager:
    NETWORK_NAME = "whacdamole-net"

    @staticmethod
    def setup_network():
        print(f"Setting up network: {NetworkManager.NETWORK_NAME}")
        try:
            subprocess.run(
                [
                    "docker",
                    "network",
                    "create",
                    "--driver",
                    "bridge",
                    NetworkManager.NETWORK_NAME,
                ],
                check=True,
            )
            print("Network setup successfully.")
        except subprocess.CalledProcessError:
            print("Network already exists or could not be created.")

    @staticmethod
    def teardown_network():
        print(f"Tearing down network: {NetworkManager.NETWORK_NAME}")
        try:
            subprocess.run(
                ["docker", "network", "rm", NetworkManager.NETWORK_NAME], check=True
            )
            print("Network teardown successful.")
        except subprocess.CalledProcessError:
            print("Failed to stop Docker network.")


class RegistryManager:
    def __init__(self, config_manager):
        self.config_manager = config_manager
        self.container_name = "whacdamole-registry"
        self.registry_image = self.config_manager.config_data["spec"].get(
            "registryImage", "registry:2.8.3"
        )
        self.port = self.config_manager.config_data["spec"]["localEnvironment"][
            "localDockerRegistryPort"
        ]

    def start_registry(self):
        print("Starting local Docker registry...")
        if self.is_registry_running():
            print("Local registry is already running.")
            return
        NetworkManager.setup_network()
        DockerHelper.run_docker_compose(self.compose_content(), ["up", "-d"])

    def stop_registry(self):
        print("Stopping local Docker registry...")
        NetworkManager.teardown_network()
        DockerHelper.run_docker_compose(self.compose_content(), ["down"])

    def is_registry_running(self):
        result = subprocess.run(
            ["docker", "ps", "-q", "-f", f"name={self.container_name}"],
            stdout=subprocess.PIPE,
        )
        return bool(result.stdout.strip())

    def compose_content(self):
        return f"""
        services:
          registry:
            container_name: {self.container_name}
            image: {self.registry_image}
            ports:
              - {self.port}:5000
            networks:
              - {NetworkManager.NETWORK_NAME}
        networks:
          {NetworkManager.NETWORK_NAME}:
            external: true
        """


class KubernetesManager:
    def __init__(self, config_manager):
        self.config_manager = config_manager
        self.directory = os.path.join(os.getcwd(), ".whacdamoleout/k3s")
        self.server_name = "whacdamole-k8s-server"
        self.agent_name = "whacdamole-k8s-agent"
        self.kube_config = None

    def start_k3s(self):
        print("Starting K3s cluster...")
        os.makedirs(self.directory, exist_ok=True)
        self.create_registries_file()
        try:
            DockerHelper.run_docker_compose(self.k3s_compose_content(), ["up", "-d"])
            self.kube_config = os.path.join(self.directory, "kubeconfig.yaml")
            print("K3s cluster started successfully.")
        except subprocess.CalledProcessError:
            print("Failed to start K3s cluster.")
            self.stop_k3s()
            raise subprocess.CalledProcessError

    def stop_k3s(self):
        print("Stopping K3s cluster...")
        try:
            DockerHelper.run_docker_compose(self.k3s_compose_content(), ["down"])
            self.kube_config = None
            print("K3s cluster stopped successfully.")
        except subprocess.CalledProcessError:
            print("Failed to stop K3s cluster.")
            raise subprocess.CalledProcessError

        try:
            shutil.rmtree(self.directory)
        except:
            print("Kubernetes likely already deleted.")

    def create_registries_file(self):
        registries_path = os.path.join(self.directory, "registries.yaml")

        endpoints = [f"http://whacdamole-registry:5000"]
        local_registries = self.config_manager.config_data["spec"][
            "localEnvironment"
        ].get("localDockerRegistries", [])
        endpoints.extend(local_registries)

        registries_data = self.config_manager.config_data["spec"][
            "localEnvironment"
        ].get("localDockerRegistriesFile", {})

        registries_data["mirrors"] = registries_data.get("mirrors", {})
        registries_data["mirrors"]["whacdamole.registry"] = {
            "endpoint": endpoints,
            "rewrites": {"(.*)?ns=whacdamole.registry(.*)": ""},
        }

        yaml_str = yaml.dump(registries_data)
        # Fix keys by quoting them for YAML compatibility
        yaml_str = (
            yaml_str.replace("docker.io:", '"docker.io":')
            .replace(
                "(.*)?ns=whacdamole.registry(.*)", '"(.*)?ns=whacdamole.registry(.*)"'
            )
            .replace("whacdamole.registry:", '"whacdamole.registry":')
        )

        with open(registries_path, "w") as f:
            f.write(yaml_str)

    def k3s_compose_content(self):
        return f"""
        networks:
          whacdamole-net:
            external: true
        services:
          server:
            image: {self.config_manager.config_data['spec'].get('k3sImage', 'rancher/k3s:v1.32.0-k3s1')}
            container_name: {self.server_name}
            restart: always
            command:
              - server  
              - --disable-cloud-controller
              - --snapshotter=fuse-overlayfs
              - --debug
              - -d
              - /var/lib/rancher/k3s
            volumes:
              - {self.directory}:/output
              - {self.directory}/registries.yaml:/etc/rancher/k3s/registries.yaml
            tmpfs: ["/run", "/var/run"]
            privileged: true
            environment:
              - K3S_TOKEN=secret
              - K3S_KUBECONFIG_OUTPUT=/output/kubeconfig.yaml
              - K3S_KUBECONFIG_MODE=666
            hostname: {self.server_name}
            ports: ["6443:6443", "443:32443", "80:32080"]
            networks: 
              - whacdamole-net
            extra_hosts:
              - "host.docker.internal:host-gateway"
          agent:
            image: {self.config_manager.config_data['spec'].get('k3sImage', 'rancher/k3s:v1.32.0-k3s1')}
            container_name: {self.agent_name}
            restart: always
            command: 
              - agent  
              - --snapshotter=fuse-overlayfs
              - --debug
              - -d
              - /var/lib/rancher/k3s
            volumes:
              - {self.directory}/registries.yaml:/etc/rancher/k3s/registries.yaml
            tmpfs: ["/run", "/var/run"]
            privileged: true
            environment:
              - K3S_URL=https://server:6443
              - K3S_TOKEN=secret
            hostname: {self.agent_name}
            networks: 
              - whacdamole-net
            extra_hosts:
              - "host.docker.internal:host-gateway"
        """


class Whacdamole:
    def __init__(self):
        self.args = self.parse_args()
        self.config_manager = ConfigurationManager(
            self.args.base_dir, self.args.config_file
        )
        self.registry_manager = RegistryManager(self.config_manager)
        self.kubernetes_manager = KubernetesManager(self.config_manager)

    def parse_args(self):
        parser = argparse.ArgumentParser(
            prog="whacdamole", description="Whacdamole CLI"
        )
        parser.add_argument(
            "--base-dir", default=os.getcwd(), help="Base directory for operations."
        )
        parser.add_argument(
            "--config-file", default=".whacdamole", help="Configuration file to use."
        )
        subparsers = parser.add_subparsers(dest="command")

        self.add_subparser_commands(subparsers)

        return parser.parse_args()

    def add_subparser_commands(self, subparsers):
        registry_parser = subparsers.add_parser(
            "registry", help="Manage local Docker registry"
        )
        registry_subparsers = registry_parser.add_subparsers(dest="subcommand")
        registry_up_parser = registry_subparsers.add_parser(
            "up", help="Start the local registry"
        )
        registry_down_parser = registry_subparsers.add_parser(
            "down", help="Stop the local registry"
        )

        k3s_parser = subparsers.add_parser("k3s", help="Manage K3s cluster")
        k3s_subparsers = k3s_parser.add_subparsers(dest="k3s_command")
        k3s_up_parser = k3s_subparsers.add_parser("up", help="Start K3s cluster")
        k3s_down_parser = k3s_subparsers.add_parser("down", help="Stop K3s cluster")

        build_parser = subparsers.add_parser(
            "build", help="Build and push Docker images"
        )
        deploy_parser = subparsers.add_parser("deploy", help="Deploy configurations")
        undeploy_parser = subparsers.add_parser(
            "undeploy", help="Stop Kubernetes and Registry"
        )

    def run(self):
        if self.args.command == "registry":
            if self.args.subcommand == "up":
                self.registry_manager.start_registry()
            elif self.args.subcommand == "down":
                self.registry_manager.stop_registry()

        elif self.args.command == "k3s":
            if self.args.k3s_command == "up":
                self.kubernetes_manager.start_k3s()
            elif self.args.k3s_command == "down":
                self.kubernetes_manager.stop_k3s()

        elif self.args.command == "build":
            self.build()
        elif self.args.command == "deploy":
            self.deploy()
        elif self.args.command == "undeploy":
            self.undeploy()

    def build(self):
        if self.config_manager.config_data["spec"]["localEnvironment"][
            "enableLocalDockerRegistry"
        ]:
            self.registry_manager.start_registry()

        docker_images = self.config_manager.config_data["spec"]["dockerImages"]
        for image in docker_images:
            name = image["name"]
            tags = image["tags"]
            registry = image["registry"]
            directory = image["directory"]

            for tag in tags:
                full_image_name = f"{registry}/{name}:{tag}"
                image_build_path = os.path.join(self.args.base_dir, directory)
                print(f"Building image {full_image_name} from {image_build_path}...")
                try:
                    subprocess.run(
                        ["docker", "build", "-t", full_image_name, image_build_path],
                        check=True,
                    )
                    subprocess.run(["docker", "push", full_image_name], check=True)
                    print(f"Image {full_image_name} built and pushed successfully.")
                except subprocess.CalledProcessError:
                    print(f"Failed to build or push image {full_image_name}.")
                    sys.exit(1)

    def deploy(self):
        if DockerHelper.has_docker():
            self.build()

        if self.config_manager.config_data["spec"]["localEnvironment"][
            "enableLocalKubernetes"
        ]:
            self.kubernetes_manager.start_k3s()

        kube_config = (
            self.kubernetes_manager.kube_config
            or self.config_manager.config_data["spec"]
            .get("localEnvironment", {})
            .get("kubeconfig")
        )

        self.deploy_helm(kube_config)
        self.deploy_kustomize(kube_config)

    def deploy_helm(self, kube_config):
        helm_deployments = self.config_manager.config_data["spec"].get(
            "helmDeployments", []
        )
        for deployment in helm_deployments:
            self.helm_deploy(deployment, kube_config)

    def helm_deploy(self, deployment, kube_config):
        git_repo = deployment.get("gitRepo")
        helm_repo = deployment.get("helmRepo")
        helm_repo_path = deployment.get("helmRepoPath")
        release = deployment.get("release", "my-release")
        release_path = deployment["releasePath"]
        namespace = deployment.get("namespace", "default")
        with tempfile.TemporaryDirectory() as tmpdir:
            if git_repo:
                subprocess.run(["git", "clone", git_repo, tmpdir], check=True)
                chart_full_path = os.path.join(tmpdir, release_path)
            else:
                chart_full_path = os.path.join(self.args.base_dir, release_path)

            cmd_env = os.environ.copy()
            if kube_config:
                cmd_env["KUBECONFIG"] = kube_config

            helm_cmd = [
                "helm",
                "upgrade",
                "--install",
                "-n",
                namespace,
                "--atomic",
                release,
                chart_full_path,
            ]

            if helm_repo:
                for attempt in range(10):
                    try:
                        subprocess.run(
                            ["helm", "repo", "add", helm_repo, helm_repo_path],
                            env=cmd_env,
                            check=True,
                        )
                        subprocess.run(
                            ["helm", "repo", "update"], env=cmd_env, check=True
                        )
                        break
                    except Exception:
                        time.sleep(5)
                        if attempt == 9:
                            sys.exit(1)

            for attempt in range(10):
                try:
                    subprocess.run(helm_cmd, env=cmd_env, check=True)
                    break
                except Exception:
                    time.sleep(5)
                    if attempt == 9:
                        sys.exit(1)

    def deploy_kustomize(self, kube_config):
        kustomize_deployments = self.config_manager.config_data["spec"].get(
            "kustomizeDeployments", []
        )
        for deployment in kustomize_deployments:
            self.kustomize_deploy(deployment, kube_config)

    def kustomize_deploy(self, deployment, kube_config):
        git_repo = deployment.get("gitRepo")
        kustomize_path = deployment.get("kustomizePath", ".")
        namespace = deployment.get("namespace", "default")
        with tempfile.TemporaryDirectory() as tmpdir:
            if git_repo:
                subprocess.run(["git", "clone", git_repo, tmpdir], check=True)
                kustomize_full_path = os.path.join(tmpdir, kustomize_path)
            else:
                kustomize_full_path = os.path.join(self.args.base_dir, kustomize_path)

            cmd_env = os.environ.copy()
            if kube_config:
                cmd_env["KUBECONFIG"] = kube_config

            for attempt in range(25):
                try:
                    subprocess.run(
                        [
                            "kubectl",
                            "apply",
                            "-n",
                            namespace,
                            "-k",
                            kustomize_full_path,
                        ],
                        env=cmd_env,
                        check=True,
                    )
                    break
                except Exception:
                    time.sleep(10)
                    if attempt == 9:
                        sys.exit(1)

    def undeploy(self):
        if DockerHelper.has_docker():
            self.registry_manager.stop_registry()
        self.kubernetes_manager.stop_k3s()


if __name__ == "__main__":
    whacdamole = Whacdamole()
    whacdamole.run()
